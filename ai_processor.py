import google.generativeai as genai
from config import GEMINI_API_KEY # API 키는 config.py 또는 환경변수에서 관리

# Google Gemini API 초기화
genai.configure(api_key=GEMINI_API_KEY)

# 사용할 모델 (비용 효율적인 최신 Flash 모델 권장)
GEMINI_MODEL_NAME = 'gemini-2.0-flash' 

def extract_facts_from_article(article_text):
    """기사 내용에서 숨겨진 의도와 편향성을 고려하여 검증 가능한 핵심 사실만 추출
    
    Args:
        article_text: 기사 전체 내용 텍스트
        
    Returns:
        추출된 비판적으로 검토된 사실 텍스트
    """
    try:
        model = genai.GenerativeModel(GEMINI_MODEL_NAME)
        
        prompt = f"""
        당신은 매우 예리하고 비판적인 뉴스 분석가입니다. 다음 뉴스 기사를 분석하여, 다음 원칙에 따라 핵심적인 '사실'만을 추출해주십시오.

        **분석 및 추출 원칙:**
        1.  **표면적 주장 너머의 진실:** 기사에 명시된 내용이라 할지라도, 그것이 실제로 검증 가능한 '사실'인지, 아니면 특정 개인/집단의 '주장', '의견', '해석', '감정적 호소'인지 엄격히 구분합니다.
        2.  **근거의 명확성:** 추출 대상은 반드시 기사 내에서 명시적인 근거(예: 직접 인용된 발언, 구체적인 통계 수치, 공식 문서 내용 등)가 제시된 내용이어야 합니다. 근거가 불분명하거나 암시적인 내용은 사실로 간주하지 않습니다.
        3.  **작성자/발언자 의도 간파:** 기사 작성자나 인용된 발언자의 숨겨진 의도(예: 특정 입장 옹호, 여론 선동, 책임 회피 등)나 편향성을 최대한 간파하려 노력하고, 이러한 의도가 반영된 표현은 사실 추출에서 제외하거나, 그것이 '주장'임을 명확히 합니다.
        4.  **정보 출처의 신뢰도 고려:** 인용된 정보나 발언의 출처가 불분명하거나 신뢰도가 의심될 경우, 해당 내용을 사실로 채택하는 데 신중을 기합니다.
        5.  **객관적이고 건조한 표현:** 추출된 내용은 감정적 수식어나 가치 판단이 배제된, 최대한 건조하고 객관적인 문장으로 재구성합니다.
        6.  **핵심 정보 위주:** 사건의 본질을 이해하는 데 필요한 핵심적인 육하원칙(누가, 언제, 어디서, 무엇을, 어떻게, 왜)에 해당하는 정보를 우선적으로 추출합니다.

        **제외 대상:**
        - 작성자의 주관적인 해설, 평가, 예측, 수사적 질문
        - 단순 루머, 미확인 정보, 추측성 발언
        - 감정적이거나 선동적인 표현
        - 광고성 내용이나 홍보 문구

        다음 기사를 위 원칙에 따라 분석하고, 검증 가능한 핵심 사실만을 간결하게 정리하여 제시해주십시오.
        결과는 번호 매기기나 글머리 기호 없이, 문단 형태로 자연스럽게 이어지도록 작성해주세요.

        <기사>
        {article_text}
        </기사>
        """
        
        response = model.generate_content(prompt)
        return response.text
    
    except Exception as e:
        print(f"사실 추출 AI 처리 오류: {e}")
        return f"AI 처리 중 오류가 발생했습니다: {str(e)}"

def neutralize_and_annotate_facts(facts_text):
    """추출된 사실에 대해 비판적 분석, 다각적 관점 및 균형을 위한 주석 추가
    
    Args:
        facts_text: 앞 단계에서 비판적으로 추출된 사실 텍스트
        
    Returns:
        다각적 분석 및 균형 잡힌 주석이 추가된 텍스트
    """
    try:
        model = genai.GenerativeModel(GEMINI_MODEL_NAME)
        
        prompt = f"""
        당신은 균형감각과 비판적 사고 능력이 뛰어난 팩트체커 겸 해설가입니다. 다음은 1차적으로 추출된 뉴스 기사의 '사실' 정보입니다. 이 내용을 바탕으로, 독자가 사안을 다각적이고 균형 있게 이해할 수 있도록 심층 분석하고, 필요한 주석을 추가해주십시오.

        **분석 및 주석 추가 원칙:**
        1.  **맥락적 이해와 숨겨진 의미 분석:** 제시된 각 사실이 어떤 배경과 맥락에서 나왔는지, 그리고 그 이면에 숨겨진 의미나 특정 집단의 이해관계가 있는지 분석합니다.
        2.  **반론 및 다른 관점 제시:** 만약 추출된 사실이 특정 입장을 강하게 대변하거나 일방적으로 보일 경우, 이에 대한 합리적인 반론, 상반된 주장, 또는 다른 관점에서 볼 수 있는 해석을 [균형점] 또는 [다른 시각] 태그와 함께 간결하게 제시합니다. "A는 X라고 주장했다면, B는 Y라고 반박할 수 있다" 또는 "이 사안은 Z라는 측면도 고려해야 한다"와 같이 기술합니다.
        3.  **정보의 한계 및 주의점 명시:** 제시된 정보가 완전하지 않거나, 특정 조건 하에서만 유효하거나, 오해의 소지가 있을 경우, [주의] 또는 [한계점] 태그를 사용하여 그 점을 명확히 지적합니다. (예: "[주의: 해당 통계는 특정 기간에 한정된 결과임]", "[한계점: 이 발언의 구체적인 실행 계획은 언급되지 않음]")
        4.  **용어의 객관성 확보:** 여전히 편향적이거나 감정적인 용어가 남아있다면, 이를 더욱 중립적이고 객관적인 표현으로 수정합니다.
        5.  **의도 및 영향력 분석 (필요시):** 특정 발언이나 사건이 사회적으로나 정치적으로 어떤 의도를 가지고 행해졌을 가능성이 있는지, 또는 어떤 파급 효과를 가져올 수 있는지에 대한 분석적 코멘트를 [분석] 태그와 함께 추가할 수 있습니다. (예: "[분석: 이 정책 발표는 다가오는 선거를 의식한 행보로 해석될 여지가 있음]")
        6.  **근거의 재확인 및 보강:** 제시된 사실의 근거가 미흡하다고 판단되면, 어떤 추가 정보가 필요한지 또는 어떤 점을 더 확인해야 하는지를 [추가 확인 필요] 태그로 언급할 수 있습니다.
        7.  **주석의 명확성 및 간결성:** 모든 주석은 독자가 쉽게 이해할 수 있도록 명확하고 간결하게 작성하며, 원본 사실과 논리적으로 연결되어야 합니다. 주석은 관련 내용 바로 뒤에 괄호 안에 태그와 함께 기술합니다.

        **최종 목표:** 독자가 주어진 정보를 맹목적으로 수용하는 것이 아니라, 비판적으로 사고하고 다양한 관점을 고려하여 스스로 판단할 수 있도록 돕는 것입니다. 원문 사실을 기반으로 하되, 위 분석 내용을 적절히 추가하여 재구성해주십시오.

        <추출된 사실>
        {facts_text}
        </추출된 사실>
        """
        
        response = model.generate_content(prompt)
        return response.text
    
    except Exception as e:
        print(f"중립화 및 주석 AI 처리 오류: {e}")
        return f"AI 처리 중 오류가 발생했습니다: {str(e)}"

def summarize_for_readability(annotated_text):
    """비판적 분석과 주석이 추가된 내용을 독자의 균형 잡힌 이해를 돕도록 요약
    
    Args:
        annotated_text: 앞 단계에서 비판적 분석 및 주석이 추가된 텍스트
        
    Returns:
        균형 잡힌 시각을 제공하는 최종 요약본 (HTML 형식)
    """
    try:
        model = genai.GenerativeModel(GEMINI_MODEL_NAME)
        
        prompt = f"""주어진 <주석이 추가된 텍스트>를 바탕으로, 다른 부가적인 설명이나 인사말 없이, 독자가 사건의 핵심을 파악하고 다양한 관점을 고려하며 균형 잡힌 시각을 가질 수 있도록 명확하고 간결하게 오직 아래의 **출력 스타일 및 형식 지침**과 **요약 원칙**에 따라서 최종 요약 내용만을 작성해주십시오. 주석 또한 내용에 포함하여도 좋습니다(적절한 말머리 또는 태그 적용)

**출력 스타일 및 형식 지침:**
1.  **어투:** 독자들이 이해하기 쉽도록 **어려운 단어나 한자어는 쉽게 풀어서**설명해주세요. 하지만 내용의 전문성과 정확성은 반드시 지켜야하고 문맥이나 의도가 변경되면 안됩니다.
2.  **텔레그램 HTML 형식:** 결과는 반드시 텔레그램에서 지원하는 HTML 형식에 맞춰 작성해주세요. 사용 가능한 주요 태그는 `<b>` (굵게), `<i>` (기울임꼴), `<u>` (밑줄), `<s>` (취소선), `<tg-spoiler>` (스포일러), `<code>` (고정폭 글꼴), `<pre>` (미리 서식 지정된 고정폭 코드 블록), `<a>` (하이퍼링크) 입니다. 태그를 과도하게 사용하지는 마세요.
    *   예시: `<b>중요한 내용</b>은 이렇게 강조하고, <i>이탤릭체</i>도 사용할 수 있어요. 링크는 <a href="URL_여기">이렇게</a> 표시해주세요. (실제 URL은 제공하지 않아도 됩니다. 형식만 맞춰주세요.)
    *   문맥에 맞는 이모지(emoji)를 1~2개 정도 사용하여 가독성을 높여주세요. (예: ✅, 📰, 💡, 🤔, 👉)
3.  **HTML 특수 문자 이스케이프:** 일반 텍스트 내용에 HTML 태그로 해석될 수 있는 문자 `<`, `>`, `&`, `"`가 포함될 경우, 각각 `&lt;`, `&gt;`, `&amp;`, `&quot;`로 반드시 이스케이프 처리해주세요.

**요약 원칙:**
1.  **핵심 쟁점 및 사실 명료화:** 사건의 가장 중요한 핵심 사실과 쟁점이 무엇인지 명확히 드러나도록 요약합니다.
2.  **주요 분석 및 주석 반영:** 앞 단계에서 추가된 중요한 [균형점], [다른 시각], [주의], [분석] 등의 주석 내용 중 핵심적인 부분을 요약에 포함하여, 독자가 사안의 복잡성과 다면성을 인지하도록 합니다.
3.  **객관적 어조와 중립성 유지:** 요약은 감정을 배제하고 객관적인 어조를 유지하며, 특정 입장에 치우치지 않도록 주의합니다. (단, 전체적인 어투는 위 '출력 스타일' 지침을 따라주세요.)
4.  **가독성 및 간결성:** 독자가 모바일 메신저 등을 통해 빠르고 쉽게 이해할 수 있도록, 간결한 문장과 적절한 문단 구분(HTML에서는 `<br>`이나 `<p>` 태그 대신, 의미있는 문단 구분을 위해 단순 줄바꿈 `\n`을 사용하고, 텔레그램이 이를 처리하도록 합니다)을 사용합니다. 3~5개의 핵심 포인트로 정리하는 것을 목표로 합니다.
5.  **판단 유보 및 사고 촉진:** 최종 요약은 독자에게 정답을 제시하기보다는, 다양한 정보를 바탕으로 스스로 생각하고 판단할 여지를 남겨두는 방식으로 마무리합니다. (예: "이 사안에 대해서는 여러 의견이 있는 것 같으니, 좀 더 지켜보는 게 좋겠어요. 🤔")

**최종 요약은 다음과 같은 질문에 답을 줄 수 있어야 합니다:**
- 이 뉴스의 핵심 내용은 무엇인가?
- 이 내용에 대해 어떤 다른 시각이나 주의할 점이 있는가?
- 그래서 나는 이 문제에 대해 어떤 점을 더 생각해봐야 하는가?

<주석이 추가된 텍스트>
{annotated_text}
</주석이 추가된 텍스트>
"""
        
        response = model.generate_content(prompt)
        return response.text
    
    except Exception as e:
        print(f"요약 AI 처리 오류: {e}")
        return f"AI 처리 중 오류가 발생했습니다: {str(e)}"

def process_article(article_text):
    """기사 전체 처리 과정 (비판적 사실 추출 -> 다각적 분석/주석 -> 균형 잡힌 요약)
    
    Args:
        article_text: 기사 전체 내용 텍스트
        
    Returns:
        최종 처리된 균형 잡힌 요약본
    """
    try:
        print("1단계: 비판적 사실 추출 중...")
        facts = extract_facts_from_article(article_text)
        if "AI 처리 중 오류가 발생했습니다" in facts:
            return facts 
        print("사실 추출 완료:\n", facts)
        
        print("\n2단계: 중립화 및 주석 추가 중...")
        annotated = neutralize_and_annotate_facts(facts)
        if "AI 처리 중 오류가 발생했습니다" in annotated:
            return annotated
        print("중립화 및 주석 추가 완료:\n", annotated)
        
        print("\n3단계: 가독성 높은 요약 중...")
        summary = summarize_for_readability(annotated)
        if "AI 처리 중 오류가 발생했습니다" in summary:
            return summary
        print("요약 완료:\n", summary)
        
        return summary
    
    except Exception as e:
        print(f"기사 처리 오류: {e}")
        return f"기사 처리 중 오류가 발생했습니다: {str(e)}"

# --- 테스트를 위한 예시 ---
if __name__ == '__main__':
    # 실제 config.py에 GEMINI_API_KEY="YOUR_API_KEY" 형태로 저장되어 있어야 합니다.
    # 또는 환경변수 GOOGLE_API_KEY로 설정할 수 있습니다.
    # from dotenv import load_dotenv
    # load_dotenv() # .env 파일 사용 시
    
    # 테스트용 예시 기사 (실제로는 웹 크롤링 등으로 가져옴)
    sample_article_text = """
    정부 관계자는 최근 논란이 되고 있는 부동산 정책에 대해 "서민들의 주거 안정을 위한 불가피한 조치"라고 강조하며, 
    "일부 투기 세력의 시장 교란 행위에 대해서는 강력히 대응할 것"이라고 밝혔다. 
    이 관계자는 또한 "이번 정책으로 인해 단기적인 시장 혼란이 있을 수 있으나, 장기적으로는 시장 안정화에 기여할 것"이라고 덧붙였다.
    야당 의원 A는 "정부의 일방적인 정책 추진이 시장의 불확실성만 키우고 있으며, 서민들의 고통을 외면하고 있다"고 강하게 비판했다. 
    그는 "즉각적인 정책 철회와 함께 시장 전문가 및 국민 의견 수렴을 통한 새로운 대안 마련이 시급하다"고 주장했다.
    한편, 시민단체 B는 "정부 정책의 방향은 옳으나, 구체적인 실행 방안에서 서민을 위한 세심한 배려가 부족하다"며 
    "보완책 마련이 필요하다"는 입장을 내놨다. 이들은 조만간 관련 토론회를 개최할 예정이라고 전했다.
    전문가 C는 "현재 부동산 시장은 복합적인 요인이 작용하고 있어 단편적인 정책만으로는 해결이 어렵다"며 
    "정부와 시장 참여자 간의 신뢰 회복과 장기적인 관점에서의 접근이 중요하다"고 조언했다.
    """

    print(">>> 기사 원문:\n", sample_article_text)
    print("\n>>> AI 처리 시작...")
    
    final_summary = process_article(sample_article_text)
    
    print("\n\n================ 최종 요약 (AI 생성) ================\n")
    print(final_summary)
    print("\n======================================================")